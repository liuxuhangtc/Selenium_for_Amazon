<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="5" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="45059" started-at="2020-01-05T11:58:16 EST" finished-at="2020-01-05T11:59:01 EST">
    <groups>
    </groups>
    <test name="Test" duration-ms="45059" started-at="2020-01-05T11:58:16 EST" finished-at="2020-01-05T11:59:01 EST">
      <class name="example.scenario1">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:example.scenario1@682b2fa]" name="beforeTest" is-config="true" duration-ms="2910" started-at="2020-01-05T11:58:16 EST" finished-at="2020-01-05T11:58:19 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="reg_user_positive()[pri:1, instance:example.scenario1@682b2fa]" name="reg_user_positive" duration-ms="3649" started-at="2020-01-05T11:58:26 EST" description="Register a new Amazon account" finished-at="2020-01-05T11:58:30 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reg_user_positive -->
        <test-method status="FAIL" signature="reg_user_negative()[pri:2, instance:example.scenario1@682b2fa]" name="reg_user_negative" duration-ms="1481" started-at="2020-01-05T11:58:30 EST" description="Register a new Amazon account" finished-at="2020-01-05T11:58:31 EST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected:<INVALID-EMAIL-FORMAT> but was:<rashika.moza@gmail.com>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected:<INVALID-EMAIL-FORMAT> but was:<rashika.moza@gmail.com>
at org.testng.AssertJUnit.assertEquals(AssertJUnit.java:82)
at org.testng.AssertJUnit.assertEquals(AssertJUnit.java:87)
at example.scenario1.reg_user_negative(scenario1.java:140)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reg_user_negative -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:example.scenario1@682b2fa]" name="afterTest" is-config="true" duration-ms="141" started-at="2020-01-05T11:59:01 EST" finished-at="2020-01-05T11:59:01 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- example.scenario1 -->
      <class name="example.scenario3">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:example.scenario3@217ed35e]" name="beforeTest" is-config="true" duration-ms="4326" started-at="2020-01-05T11:58:22 EST" finished-at="2020-01-05T11:58:26 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="addFirstItem()[pri:1, instance:example.scenario3@217ed35e]" name="addFirstItem" duration-ms="17271" started-at="2020-01-05T11:58:31 EST" description="Add first item" finished-at="2020-01-05T11:58:48 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addFirstItem -->
        <test-method status="PASS" signature="addSecondItem()[pri:2, instance:example.scenario3@217ed35e]" name="addSecondItem" duration-ms="7764" started-at="2020-01-05T11:58:48 EST" description="Add second item" finished-at="2020-01-05T11:58:56 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addSecondItem -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:example.scenario3@217ed35e]" name="afterTest" is-config="true" duration-ms="308" started-at="2020-01-05T11:59:01 EST" finished-at="2020-01-05T11:59:01 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- example.scenario3 -->
      <class name="example.scenario2">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:example.scenario2@7dcf94f8]" name="beforeTest" is-config="true" duration-ms="2338" started-at="2020-01-05T11:58:19 EST" finished-at="2020-01-05T11:58:22 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="sign_in_positive()[pri:2, instance:example.scenario2@7dcf94f8]" name="sign_in_positive" duration-ms="4524" started-at="2020-01-05T11:58:56 EST" description="Sign in to Amazon account" finished-at="2020-01-05T11:59:01 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sign_in_positive -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:example.scenario2@7dcf94f8]" name="afterTest" is-config="true" duration-ms="304" started-at="2020-01-05T11:59:01 EST" finished-at="2020-01-05T11:59:01 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- example.scenario2 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
